package inventory

import (
	. "github.com/KouKouChan/CSO2-Server/blademaster/typestruct"
	. "github.com/KouKouChan/CSO2-Server/configure"
	. "github.com/KouKouChan/CSO2-Server/kerlong"
)

var (
	FullInventoryItem  []UserInventoryItem
	FullInventoryReply []byte
)

func BuildInventoryInfo(u *User) []byte {
	if Conf.UnlockAllWeapons == 1 {
		return FullInventoryReply
	}
	buf := make([]byte, 5+u.Inventory.NumOfItem*19)
	offset, offset_front := 2, 0
	num := 0
	//WriteUint16(&buf, u.Inventory.NumOfItem, &offset)
	for k, v := range u.Inventory.Items {
		if v.Count <= 0 {
			continue
		}
		WriteUint16(&buf, uint16(k), &offset)
		WriteUint8(&buf, 1, &offset)
		WriteUint32(&buf, v.Id, &offset)
		WriteUint16(&buf, v.Count, &offset)
		WriteUint8(&buf, 1, &offset)
		WriteUint8(&buf, 0, &offset)
		WriteUint64(&buf, 0, &offset)

		num++
	}
	WriteUint16(&buf, uint16(num), &offset_front)
	return buf[:offset]
}

func BuildInventoryInfoSingle(u *User, itemid uint32) []byte {
	buf := make([]byte, 128)
	offset := 0
	WriteUint16(&buf, 1, &offset)
	for k, v := range u.Inventory.Items {
		if v.Id != itemid {
			continue
		}
		WriteUint16(&buf, uint16(k), &offset)
		if v.Count == 0 {
			WriteUint8(&buf, 0, &offset) //existed
		} else {
			WriteUint8(&buf, 1, &offset)
		}
		WriteUint32(&buf, v.Id, &offset)
		WriteUint16(&buf, v.Count, &offset)
		WriteUint8(&buf, 1, &offset)
		WriteUint8(&buf, 0, &offset)
		WriteUint64(&buf, 0, &offset)
		break
	}
	return buf[:offset]
}

// func BuildInventoryItemUsed(u *User, itemid uint32, idx int, count uint16) []byte {
// 	buf := make([]byte, 25)
// 	offset := 0
// 	WriteUint16(&buf, 1, &offset)
// 	WriteUint16(&buf, uint16(idx), &offset)
// 	if count <= 0 {
// 		WriteUint8(&buf, 0, &offset) //existed
// 	} else {
// 		WriteUint8(&buf, 1, &offset)
// 	}
// 	WriteUint32(&buf, itemid, &offset)
// 	WriteUint16(&buf, count, &offset)
// 	WriteUint8(&buf, 1, &offset)
// 	WriteUint8(&buf, 0, &offset)
// 	WriteUint64(&buf, 0, &offset)
// 	return buf[:offset]
// }

func BuildFullInventoryInfo() []byte {
	buf := make([]byte, 5+uint16(len(FullInventoryItem))*19)
	offset := 0
	WriteUint16(&buf, uint16(len(FullInventoryItem)), &offset)
	for k, v := range FullInventoryItem {
		WriteUint16(&buf, uint16(k), &offset)
		WriteUint8(&buf, 1, &offset)
		WriteUint32(&buf, v.Id, &offset)
		WriteUint16(&buf, v.Count, &offset)
		WriteUint8(&buf, 1, &offset)
		WriteUint8(&buf, 0, &offset)
		WriteUint64(&buf, 0, &offset)
	}
	return buf[:offset]
}

func BuildDefaultInventoryInfo() []byte {
	buf := make([]byte, 5+len(DefaultInventoryItem)*19)
	offset := 0
	WriteUint16(&buf, 25, &offset)
	for k, v := range DefaultInventoryItem {
		WriteUint16(&buf, uint16(k), &offset)
		WriteUint8(&buf, 1, &offset)
		WriteUint32(&buf, v.Id, &offset)
		WriteUint16(&buf, v.Count, &offset)
		WriteUint8(&buf, 1, &offset)
		WriteUint8(&buf, 0, &offset)
		WriteUint64(&buf, 0, &offset)

	}
	return buf[:offset]
}

func BuildUnlockReply(u *User) []byte {
	if u == nil {
		return []byte{}
	}
	buf := make([]byte, 4096)
	offset := 0
	WriteUint8(&buf, 1, &offset)                            //type ?
	WriteUint16(&buf, uint16(len(UnlockFullList)), &offset) //num of weapons
	for k, v := range UnlockFullList {
		WriteUint32(&buf, v.Itemid, &offset)
		//WriteUint32(&buf, v.Seq, &offset)
		WriteUint32(&buf, uint32(k), &offset)
		WriteUint8(&buf, v.CostType, &offset)
		WriteUint32(&buf, v.Price, &offset)
	}

	WriteUint16(&buf, 1, &offset) //num of weapons

	WriteUint32(&buf, 2, &offset) //前置
	WriteUint32(&buf, 1, &offset) //当前
	WriteUint32(&buf, 2, &offset) //杀敌数
	WriteUint16(&buf, 1, &offset)
	WriteUint16(&buf, 1, &offset)
	WriteUint16(&buf, 1, &offset)

	WriteUint16(&buf, 1, &offset) //unk

	WriteUint32(&buf, 1, &offset)

	return buf[:offset]
}

// func BuildWeaponKillNum(u *User) []byte {
// 	if u == nil {
// 		return []byte{}
// 	}
// 	buf := make([]byte, 4096)
// 	offset := 0
// 	count := 0
// 	WriteUint16(&buf, uint16(count), &offset)
// 	for _, v := range UnlockFullList {
// 		if _, ok := u.WeaponKills[v.Itemid]; ok && u.WeaponKills[v.Itemid] > 0 {
// 			count++
// 			WriteUint32(&buf, 2, &offset) //前置
// 			WriteUint32(&buf, 1, &offset) //当前
// 			WriteUint32(&buf, 2, &offset) //杀敌数
// 			WriteUint16(&buf, 1, &offset)
// 			WriteUint16(&buf, 1, &offset)
// 			WriteUint16(&buf, 1, &offset)
// 		}
// 	}
// 	return buf[:offset]

// }

func BuildDefaultUnlockReply() []byte {
	return []byte{0x01, 0x4B, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x0B, 0x00, 0x00, 0x00, 0x01, 0xE8, 0x03, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0C, 0x00,
		0x00, 0x00, 0x01, 0xDC, 0x05, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x01,
		0xE8, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x01, 0xDC, 0x05, 0x00,
		0x00, 0x0B, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x01, 0x08, 0x07, 0x00, 0x00, 0x3C, 0x00,
		0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x80, 0xBB, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x11,
		0x00, 0x00, 0x00, 0x01, 0xC0, 0x5D, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x01, 0x08, 0x07, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x01, 0x4C, 0x1D,
		0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x60, 0x61, 0x02, 0x00, 0x35,
		0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x01, 0x30, 0x75, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00,
		0x16, 0x00, 0x00, 0x00, 0x01, 0xA0, 0x0F, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00,
		0x00, 0x01, 0x98, 0x3A, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x01, 0xE0,
		0x93, 0x04, 0x00, 0x14, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0xA0, 0x0F, 0x00, 0x00,
		0x07, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x01, 0x98, 0x3A, 0x00, 0x00, 0x3E, 0x00, 0x00,
		0x00, 0x1B, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x93, 0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x1C, 0x00,
		0x00, 0x00, 0x01, 0x08, 0x07, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x01,
		0x30, 0x75, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x01, 0x88, 0x13, 0x00,
		0x00, 0x0C, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x01, 0x20, 0x4E, 0x00, 0x00, 0x16, 0x00,
		0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x20, 0x4E, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x43,
		0x00, 0x00, 0x00, 0x01, 0x30, 0x75, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00,
		0x01, 0x20, 0xA1, 0x07, 0x00, 0x47, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x01, 0x20, 0xA1,
		0x07, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x55,
		0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
		0x90, 0x00, 0x00, 0x00, 0x01, 0x30, 0x75, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00,
		0x00, 0x01, 0x60, 0xEA, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x01, 0x48,
		0xE8, 0x01, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x01, 0x40, 0x0D, 0x03, 0x00,
		0x6A, 0xBF, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x70, 0xBF, 0x00,
		0x00, 0xA9, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x6F, 0xBF, 0x00, 0x00, 0xAA, 0x00,
		0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x6E, 0xBF, 0x00, 0x00, 0xAB, 0x00, 0x00, 0x00, 0x00,
		0x50, 0x00, 0x00, 0x00, 0x69, 0xBF, 0x00, 0x00, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
		0x00, 0x72, 0xBF, 0x00, 0x00, 0xAD, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x6B, 0xBF,
		0x00, 0x00, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x6D, 0xBF, 0x00, 0x00, 0xAF,
		0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0xD7, 0x00, 0x00, 0x00,
		0x01, 0x50, 0xC3, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00, 0xD8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x77,
		0x01, 0x00, 0x4E, 0x00, 0x00, 0x00, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x70, 0x11, 0x01, 0x00, 0x52,
		0x00, 0x00, 0x00, 0xE9, 0x00, 0x00, 0x00, 0x01, 0xC0, 0xD4, 0x01, 0x00, 0x5B, 0x00, 0x00, 0x00,
		0x06, 0x01, 0x00, 0x00, 0x01, 0xF0, 0x49, 0x02, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x19, 0x01, 0x00,
		0x00, 0x01, 0x60, 0xEA, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x1A, 0x01, 0x00, 0x00, 0x01, 0xC0,
		0xD4, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x01, 0xF0, 0x49, 0x02, 0x00,
		0x68, 0x00, 0x00, 0x00, 0x5C, 0x01, 0x00, 0x00, 0x01, 0x20, 0xA1, 0x07, 0x00, 0x6D, 0x00, 0x00,
		0x00, 0x82, 0x01, 0x00, 0x00, 0x01, 0xA0, 0x86, 0x01, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x83, 0x01,
		0x00, 0x00, 0x01, 0xA0, 0x86, 0x01, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x84, 0x01, 0x00, 0x00, 0x01,
		0xA0, 0x86, 0x01, 0x00, 0x42, 0x00, 0x00, 0x00, 0xFA, 0x01, 0x00, 0x00, 0x01, 0x30, 0x75, 0x00,
		0x00, 0x43, 0x00, 0x00, 0x00, 0xFB, 0x01, 0x00, 0x00, 0x01, 0x50, 0xC3, 0x00, 0x00, 0x78, 0x00,
		0x00, 0x00, 0xFC, 0x01, 0x00, 0x00, 0x01, 0x40, 0x0D, 0x03, 0x00, 0x79, 0x00, 0x00, 0x00, 0x07,
		0x02, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00,
		0x00, 0x04, 0x01, 0x00, 0x00, 0x7A, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x01,
		0x00, 0x00, 0x7B, 0x00, 0x00, 0x00, 0x0A, 0x02, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0x7D,
		0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00,
		0x59, 0x02, 0x00, 0x00, 0x00, 0x0C, 0x03, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x91, 0x02, 0x00,
		0x00, 0x01, 0xF0, 0x49, 0x02, 0x00, 0x82, 0x00, 0x00, 0x00, 0x92, 0x02, 0x00, 0x00, 0x01, 0x00,
		0x53, 0x07, 0x00, 0x83, 0x00, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0x01, 0x60, 0x5B, 0x03, 0x00,
		0x85, 0x00, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x84, 0x00, 0x00,
		0x00, 0x95, 0x02, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x1F, 0x03,
		0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x00, 0xA4, 0x03, 0x00, 0x00, 0x01,
		0xE0, 0x93, 0x04, 0x00, 0x8F, 0x00, 0x00, 0x00, 0x44, 0x04, 0x00, 0x00, 0x01, 0x80, 0xA9, 0x03,
		0x00, 0x90, 0x00, 0x00, 0x00, 0x45, 0x04, 0x00, 0x00, 0x01, 0x40, 0x7E, 0x05, 0x00, 0x91, 0x00,
		0x00, 0x00, 0x46, 0x04, 0x00, 0x00, 0x01, 0x00, 0x53, 0x07, 0x00, 0x9B, 0x00, 0x00, 0x00, 0xA9,
		0x04, 0x00, 0x00, 0x01, 0xF0, 0x49, 0x02, 0x00, 0x9C, 0x00, 0x00, 0x00, 0xAA, 0x04, 0x00, 0x00,
		0x01, 0x40, 0x0D, 0x03, 0x00, 0x97, 0x00, 0x00, 0x00, 0xFC, 0x04, 0x00, 0x00, 0x01, 0x42, 0x99,
		0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0xFD, 0x04, 0x00, 0x00, 0x01, 0x86, 0x29, 0x02, 0x00, 0x99,
		0x00, 0x00, 0x00, 0xFE, 0x04, 0x00, 0x00, 0x01, 0x8C, 0xED, 0x02, 0x00, 0x10, 0x00, 0x03, 0x00,
		0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x42, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x07, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
		0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x1C, 0x00,
		0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
		0x35, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00,
		0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x13, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x08, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x3F, 0x00,
		0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00,
		0x19, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
		0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,
		0x0B, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
		0x10, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
		0x14, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
		0x1A, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x6C, 0xBF, 0x00, 0x00, 0x71, 0xBF, 0x00, 0x00,
		0x42, 0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00}
}

func CreateFullUserInventory() UserInventory {
	Inv := UserInventory{
		0,
		//createDeafaultInventoryItem(),
		CreateFullInventoryItem(),
		1047,
		1048,
		0,
		0,
		0,
		0,
		0,
		42001,
		CreateFullUserBuyMenu(),
		CreateFullLoadout(),
	}
	Inv.NumOfItem = uint16(len(Inv.Items))
	return Inv
}

func CreateFullInventoryItem() []UserInventoryItem {
	items := []UserInventoryItem{}
	// for _, v := range ItemList {
	// 	if v.Category == "weapon" || v.Category == "class" {
	// 		items = append(items, UserInventoryItem{v.ItemID, 1})
	// 	}
	// }
	var i uint32
	//用户角色
	for i = 1001; i <= 1058; i++ {
		items = append(items, UserInventoryItem{i, 1})
	}
	//添加默认武器
	number := []uint32{2, 3, 4, 6, 8, 13, 14, 15, 18, 19, 21, 23, 27, 34, 36, 37, 80, 128, 101, 49009, 49004}
	for _, v := range number {
		items = append(items, UserInventoryItem{v, 1})
	}
	//解锁武器
	for i = 1; i <= 33; i++ {
		if IsIllegal(i) {
			continue
		}
		items = append(items, UserInventoryItem{i, 1})
	}
	for i = 44; i <= 163; i++ {
		if IsIllegal(i) {
			continue
		}
		items = append(items, UserInventoryItem{i, 1})
	}
	//僵尸技能
	items = append(items, UserInventoryItem{2019, 1})
	items = append(items, UserInventoryItem{3, 1})
	items = append(items, UserInventoryItem{2020, 1})
	items = append(items, UserInventoryItem{50, 1})
	for i = 2021; i <= 2023; i++ {
		items = append(items, UserInventoryItem{i, 1})
	}
	//武器皮肤
	for i = 5042; i <= 5370; i++ {
		if IsIllegal(i) {
			continue
		}
		items = append(items, UserInventoryItem{i, 1})
	}
	items = append(items, UserInventoryItem{5997, 1})
	//帽子
	for i = 10001; i <= 10133; i++ {
		items = append(items, UserInventoryItem{i, 1})
	}
	//背包
	for i = 20001; i <= 20107; i++ {
		items = append(items, UserInventoryItem{i, 1})
	}
	//手套
	for i = 30001; i <= 30027; i++ {
		items = append(items, UserInventoryItem{i, 1})
	}
	//脚部特效
	for i = 40001; i <= 40025; i++ {
		items = append(items, UserInventoryItem{i, 1})
	}
	//喷漆
	for i = 42001; i <= 42020; i++ {
		items = append(items, UserInventoryItem{i, 1})
	}
	//道具
	for i = 49001; i <= 49010; i++ {
		items = append(items, UserInventoryItem{i, 1})
	}
	items = append(items, UserInventoryItem{49999, 1})
	//角色卡片
	for i = 60001; i <= 60004; i++ {
		items = append(items, UserInventoryItem{i, 1})
	}
	return items
}
